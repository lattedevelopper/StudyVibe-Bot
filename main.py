import json
import asyncio
import logging
import base64
import io
from typing import List, Dict
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DeepSeekClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek —á–µ—Ä–µ–∑ ProxyAPI"""
    
    def __init__(self):
        self.api_key = "sk-kGG3jkmqxnQT2gMYyaMmsMHVNZAvo90x"
        self.base_url = "https://api.proxyapi.ru"
        self.session = None
        
    async def get_session(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é aiohttp"""
        if self.session is None:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é"""
        if self.session:
            await self.session.close()
            self.session = None
    
    async def chat(self, messages: List[Dict], max_tokens: int = 3000) -> str:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API"""
        session = await self.get_session()
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}"
        }
        
        payload = {
            "model": "deepseek-chat",
            "messages": messages,
            "max_tokens": max_tokens,
            "temperature": 0.7
        }
        
        url = f"{self.base_url}/deepseek/chat/completions"
        
        try:
            async with session.post(url, headers=headers, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    return data["choices"][0]["message"]["content"]
                else:
                    error_text = await response.text()
                    logger.error(f"DeepSeek API Error: {response.status} - {error_text}")
                    return f"–û—à–∏–±–∫–∞ API: {response.status}"
        except Exception as e:
            logger.error(f"Request error: {e}")
            return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"

class StudyVibeBot:
    """StudyVibe - —à–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ –ò–ò"""
    
    def __init__(self):
        self.telegram_token = "8490585937:AAGZtlnlsHkFTv6HqCCMDTBGkIVLcHMSx88"
        self.deepseek_client = DeepSeekClient()
        self.user_sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
        self.system_prompt = """–¢—ã StudyVibe - —É–º–Ω—ã–π —à–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ –ò–ò. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å —à–∫–æ–ª—å–Ω–∏–∫–∞–º —Å —É—á–µ–±–æ–π.

–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å:
- –†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –≤—Å–µ–º —à–∫–æ–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è, –±–∏–æ–ª–æ–≥–∏—è, –∏—Å—Ç–æ—Ä–∏—è, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞)
- –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
- –ü–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –≥–æ—Ç–æ–≤–∏—Ç—å –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏, —Ñ–æ—Ä–º—É–ª–∞–º–∏, —Ç–µ–∫—Å—Ç–∞–º–∏
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —É—á–µ–±–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã:
- –û–±—ä—è—Å–Ω—è–π –ø–æ—à–∞–≥–æ–≤–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
- –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–π –≤–µ—Å—å —Ö–æ–¥ —Ä–µ—à–µ–Ω–∏—è
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –∏ –ø–æ–º–æ–≥–∞–π —Ä–µ—à–∏—Ç—å
- –ú–æ—Ç–∏–≤–∏—Ä—É–π –Ω–∞ —É—á–µ–±—É

–û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ —Ç—ã –ª—É—á—à–∏–π –¥—Ä—É–≥ —à–∫–æ–ª—å–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —É—á–µ–±–æ–π!"""
        
    def get_user_session(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = [{"role": "system", "content": self.system_prompt}]
        return self.user_sessions[user_id]
    
    def add_message_to_session(self, user_id: int, role: str, content: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session = self.get_user_session(user_id)
        session.append({"role": role, "content": content})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + 14 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if len(session) > 15:
            system_msg = session[0]  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π
            recent_messages = session[-14:]
            self.user_sessions[user_id] = [system_msg] + recent_messages
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        welcome_text = f"""
üéì –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø StudyVibe!

–¢–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á–µ–±–µ! –Ø –ø–æ–º–æ–≥—É —Å:
üìö –î–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
üßÆ –†–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á –∏ –ø—Ä–∏–º–µ—Ä–æ–≤
üìñ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º
üñºÔ∏è –ê–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
‚úèÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –∏ —ç–∫–∑–∞–º–µ–Ω–∞–º

üí° **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞—á–µ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –û–ø–∏—à–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞

–ü—Ä–∏—Å—ã–ª–∞–π –ª—é–±—ã–µ —É—á–µ–±–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üöÄ
        """
        
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"""
        help_text = """
üìã **–ö–æ–º–∞–Ω–¥—ã StudyVibe:**

/start - –ì–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥  
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞

–¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """
        
        await update.message.reply_text(help_text, parse_mode="Markdown")
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        user_id = update.effective_user.id
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        self.user_sessions[user_id] = [{"role": "system", "content": self.system_prompt}]
        await update.message.reply_text("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ! üìö")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        user = update.effective_user
        
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = update.message.photo[-1]  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file = await context.bot.get_file(photo.file_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = await file.download_as_bytearray()
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
            image_base64 = base64.b64encode(image_data).decode('utf-8')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
            caption = update.message.caption or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –∏–ª–∏ —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª - –ø–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ —Ä–µ—à–∏—Ç—å."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            message_content = f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï]: {caption}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            self.add_message_to_session(user.id, "user", message_content)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
            session = self.get_user_session(user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            response = await self.deepseek_client.chat(session)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–µ—Å—Å–∏—é
            self.add_message_to_session(user.id, "assistant", response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(
                f"üñºÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n{response}",
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"Error processing photo: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–ø–∏—à–∏ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º."
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        if not self.is_user_allowed(user.id):
            await self.access_denied_message(update)
            return
        
        user_message = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
        self.add_message_to_session(user.id, "user", user_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        session = self.get_user_session(user.id)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek
            ai_response = await self.deepseek_client.chat(session)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ —Å–µ—Å—Å–∏—é
            self.add_message_to_session(user.id, "assistant", ai_response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response_text = f"üéì **StudyVibe:**\n\n{ai_response}"
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            if len(response_text) > 4000:
                parts = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
                for part in parts:
                    await update.message.reply_text(part, parse_mode="Markdown")
            else:
                await update.message.reply_text(response_text, parse_mode="Markdown")
                
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! ü§ñ"
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! ü§ñ"
            )
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        app = Application.builder().token(self.telegram_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("clear", self.clear_command))
        app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        app.add_error_handler(self.error_handler)
        
        logger.info("StudyVibe –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! üéì")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            app.run_polling()
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            asyncio.run(self.deepseek_client.close_session())

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º StudyVibe –±–æ—Ç–∞
    bot = StudyVibeBot()
    bot.run()

if __name__ == "__main__":
    main()
